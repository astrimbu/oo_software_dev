package hw2;

import static org.junit.Assert.*;

import org.junit.Test;

public class AssertExp1Test {

//	* -7 == minValue(new double[] { -7 }) -7 == minValue(new double[] { 1, -4,
//	* -7, 7, 8, 11 }) -13 == minValue(new double[] { -13, -4, -7, 7, 8, 11 })
//	* -9 == minValue(new double[] { 1, -4, -7, 7, 8, 11, -9 })
	@Test
	public void testMinValue() {
		double[] a = {-7};
		double[] b = {1, -4, -7, 7, 8, 11};
		double[] c = {-13, -4, -7, 7, 8, 11};
		double[] d = {1, -4, -7, 7, 8, 11, -9};
		assert AssertExp1.minValue(a) == -7;
		assert AssertExp1.minValue(b) == -7;
		assert AssertExp1.minValue(c) == -13;
		assert AssertExp1.minValue(d) == -9;
	}

//	* 0 == minPosition(new double[] { -7 }) 2 == minPosition(new double[] { 1,
//  * -4, -7, 7, 8, 11 }) 0 == minPosition(new double[] { -13, -4, -7, 7, 8, 11
//	* }) 6 == minPosition(new double[] { 1, -4, -7, 7, 8, 11, -9 })
	@Test
	public void testMinPosition() {
		double[] a = {-7};
		double[] b = {1, -4, -7, 7, 8, 11};
		double[] c = {-13, -4, -7, 7, 8, 11};
		double[] d = {1, -4, -7, 7, 8, 11, -9};
		assert AssertExp1.minPosition(a) == 0;
		assert AssertExp1.minPosition(b) == 2;
		assert AssertExp1.minPosition(c) == 0;
		assert AssertExp1.minPosition(d) == 6;
	}
	
//	* 0 == numUnique(new double[] { }) 1 == numUnique(new double[] { 11 }) 1 ==
//	* numUnique(new double[] { 11, 11, 11, 11 }) 8 == numUnique(new double[] {
//	* 11, 11, 11, 11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88, 88 }) 8
//	* == numUnique(new double[] { 11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66,
//	* 77, 88 })
	@Test
	public void testNumUnique() {
		double[] a = { };
		double[] b = {11};
		double[] c = {11, 11, 11, 11};
		double[] d = {11, 11, 11, 11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88, 88};
		double[] e = {11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88};
		assert AssertExp1.numUnique(a) == 0;
		assert AssertExp1.numUnique(b) == 1;
		assert AssertExp1.numUnique(c) == 1;
		assert AssertExp1.numUnique(d) == 8;
		assert AssertExp1.numUnique(e) == 8;
				
	}

//	* new double[] { } == removeDuplicates(new double[] { }) new double[] { 11
//	* } == removeDuplicates(new double[] { 11 }) == removeDuplicates(new
//	* double[] { 11, 11, 11, 11 }) new double[] { 11, 22, 33, 44, 55, 66, 77,
//	* 88 } == removeDuplicates(new double[] { 11, 11, 11, 11, 22, 33, 44, 44,
//	* 44, 44, 44, 55, 55, 66, 77, 88, 88 }) == removeDuplicates(new double[] {
//	* 11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88 })
	@Test
	public void testRemoveDuplicates() {
		double[] a = { };
		double[] b = {11};
		double[] c = {11, 11, 11, 11};
		double[] d = {11, 11, 11, 11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88, 88};
		double[] e = {11, 22, 33, 44, 44, 44, 44, 44, 55, 55, 66, 77, 88};
//		assert AssertExp1.removeDuplicates(a).equals(new double[] { });
		assert AssertExp1.removeDuplicates(b).equals(new double[] {11});
		assert AssertExp1.removeDuplicates(c) == new double[] {11};
		assert AssertExp1.removeDuplicates(d) == new double[] {11, 22, 33, 44, 55, 66, 77, 88};
		assert AssertExp1.removeDuplicates(e) == new double[] {11, 22, 33, 44, 55, 66, 77, 88};
	}

}
